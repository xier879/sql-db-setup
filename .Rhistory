#EXERCISE 1
#Make two toy data sets (two dataframes?so two tables?)
#with at least three variables and at least 30 rows each in them(manually?).
#Have a mix of numeric and character variables.
TeacherFirstName <- c(rep("John",10),rep("Bob",10),rep("Rachel",10))
TeacherLastName <- c(rep("A",10),rep("B",10),rep("C",10))
TeacherAge <-c(rep(25,10),rep(30,10),rep(40,10))
Teacher_DF <-data.frame(TeacherFirstName,TeacherLastName,TeacherAge)
Teacher_DF
dbRemoveTable(mydb,"Teachers")
#Transfer these dataframes to your SQL database using the DBI commands. Name the tables whatever you like.
dbWriteTable(mydb, "Teachers", Teacher_DF)
dbGetQuery(mydb,"SELECT * FROM Teachers ORDER BY TeacherAge DESC LIMIT 20;")
dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('John', 'A',25),('Bob','B',30),('Rachel','C',40);")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbListTables(mydb)
dbGetQuery(mydb,"CREATE TABLE Teachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;") #No error since it is only if it exists
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName) SELECT TeacherFirstNam FROM Teachers ;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName) SELECT TeacherFirstName FROM Teachers ;")
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;") #No error since it is only if it exists
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
#CHECK if the data is inserted correctly
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "DROP TABLE Teachers;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS Teachers;")
dbListTables(mydb)
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
dbGetQuery(mydb, "DROP TABLE IF EXISTS test2;")
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
dbGetQuery(mydb, "DROP TABLE IF EXISTS test2;")
dbGetQuery(mydb,"CREATE TABLE test2 (
score INTEGER DEFAULT 0,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES ('1', 'A');")
dbGetQuery(mydb,"INSERT INTO test2 (student) VALUES ('B');")
dbGetQuery(mydb, "SELECT * FROM test2;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test2;")
dbGetQuery(mydb,"CREATE TABLE test2 (
score INTEGER UNIQUE,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES ('1', 'A');")
#Error because of unique
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES ('1', 'A');")
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES (NULL, 'A');")
dbGetQuery(mydb,"INSERT INTO test2 (score, student) VALUES (NULL, 'A');")
dbGetQuery(mydb, "DROP TABLE IF EXIST SchoolRankings;" )
dbGetQuery(mydb, "DROP TABLE IF EXISTS SchoolRankings;" )
dbGetQuery(mydb, "CREATE TABLE SchoolRankings (
SchoolName TEXT,
SchoolStateRanking INTEGER DEFAULT 0,
SchoolNationalRanking INTEGER DEFAULT 0
);")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT INTO SchoolRankings (SchoolName) Values ('a');")
dbGetQuery(mydb, "INSERT INTO SchoolRankings (SchoolName) Values ('a');")
dbGetQuery(mydb, "SELECT * FROM SchoolRankings;")
dbGetQuery(mydb, "SELECT INTO SchoolRankings (SchoolName,SchoolNationalRanking) Values ('b',3);")
dbGetQuery(mydb, "INSERT INTO SchoolRankings (SchoolName,SchoolNationalRanking) Values ('b',3);")
dbGetQuery(mydb, "SELECT * FROM SchoolRankings;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS SchoolRankings;")
dbListTables(mydb)
dbGetQuery(mydb,"SELECT * FROM TABLE studentAssessment;")
dbGetQuery(mydb,"SELECT * FROM studentAssessment;")
dbGetQuery(mydb,"SELECT * FROM studentAssessment LIMIT 20;")
dbGetQuery(mydb, "ALTER TABLE studentAssessment ADD email INTEGER DEFAULT 1 ")#The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
dbGetQuery(mydb, "SELECT * FROM studentAssessment LIMIT 10;")
dbGetQuery(mydb, "ALTER TABLE studentAssessment DROP COLUMN email;")
dbGetQuery(mydb, "SELECT * FROM studentAssessment LIMIT 10;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD NumofCourses DEFAULT 3;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD NumofCourses INTEGER DEFAULT 3;")
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"ALTER TABLE NewTeachers DROP COLUMN NumofCourses;")
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE test3 (
id INTEGER AUTO_INCREMENT PRIMARY KEY, #Not standard syntax
score INTEGER,
student TEXT
);")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (1, 'A');")
dbGetQuery(mydb,"INSERT INTO test3 (score, student) VALUES (5, 'B');")
dbGetQuery(mydb, "SELECT * FROM test3;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS test3;")
dbListTables(mydb)
dbGetQuery(mydb,"CREATE TABLE Schools (
school_id INTEGER AUTO_INCREMENT PRIMARY KEY,
school_name TEXT,
school_rankings INTEGER
);")
dbGetQuery(mydb, "DROP TABLE IF EXISTS Schools;")
dbGetQuery(mydb,"CREATE TABLE Schools (
Schoolid INTEGER AUTO_INCREMENT PRIMARY KEY,
SchoolName TEXT,
SchoolNationalRanking INTEGER DEFAULT 3,
SchoolStateRanking INTEGER DEFAULT 1
);")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('a');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('b');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('c');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('d');")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb,"SELECT * FROM studentAssessment LIMIT 10;")
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '%Region%';")
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE 'Region%';")
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '%Region';")
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region LIKE '_c%';")
dbGetQuery(mydb, "SELECT id_student, gender, region FROM studentInfo WHERE region IN ('Wales','Ireland');")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers WHERE TeacherFirstName LIKE '%Bob%';")
dbGetQuery(mydb,"SELECT TeacherFirstName TeacherLastName WHERE TeacherFirstName LIKE '_o%';")
dbGetQuery(mydb,"SELECT TeacherFirstName, TeacherLastName WHERE TeacherFirstName LIKE '_o%';")
dbGetQuery(mydb,"SELECT TeacherFirstName, TeacherLastName FROM NewTeachers WHERE TeacherFirstName LIKE '_o%';")
dbGetQuery(mydb, "SELECT * FROM studentInfo;")
dbGetQuery(mydb, "SELECT DISTINCT region FROM studentInfo;")
dbGetQuery(mydb, "SELECT DISTINCT region, gender FROM studentInfo;")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO Schools VALUES ('Emily','D',55);")
dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('Emily', 'D',55),('Emily','D',55);")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT COUNT (*) FROM NewTeachers;")
dbGetQuery(mydb, "SELECT COUNT(*) FROM studentAssessment;")
dbGetQuery(mydb, "SELECT COUNT(*) FROM NewTeachers;")
dbGetQuery(mydb, "SELECT DISTINCT(*) FROM NewTeachers;")
dbGetQuery(mydb, "SELECT DISTINCT TeacherFirstName FROM NewTeachers;")
dbGetQuery(mydb, "SELECT DISTINCT TeacherFirstName, TeacherLastName, TeacherAge FROM NewTeachers;")
dbGetQuery(mydb, "CREATE TABLE booltest (a INTEGER, b INTEGER);")
dbGetQuery(mydb, "INSERT INTO booltest VALUES (1, 0);")
dbGetQuery(mydb, "SELECT * FROM booltest;")
dbGetQuery(mydb, "CREATE TABLE booltest (a INTEGER, b INTEGER);")
dbGetQuery(mydb, "INSERT INTO booltest VALUES (1, 0);")
dbGetQuery(mydb, "SELECT * FROM booltest;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS booltest")
dbGetQuery(mydb, "CREATE TABLE booltest (a INTEGER, b INTEGER);")
dbGetQuery(mydb, "INSERT INTO booltest VALUES (1, 0);")
dbGetQuery(mydb, "SELECT * FROM booltest;")
dbGetQuery(mydb,"SELECT
CASE WHEN a THEN 'true' ELSE 'false' END as boolA,
CASE WHEN b THEN 'true' ELSE 'false' END as boolB
FROM booltest")
dbGetQuery(mydb,"SELECT
CASE WHEN a THEN 'true' ELSE 'false' END as boolA,
CASE WHEN b THEN 'true' ELSE 'false' END as boolB
FROM booltest")
dbGetQuery(mydb, "CREATE TABLE booltest (a INTEGER, b INTEGER);")
dbGetQuery(mydb, "INSERT INTO booltest VALUES (1, 0);")
dbGetQuery(mydb, "SELECT * FROM booltest;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS booltest")
dbGetQuery(mydb, "CREATE TABLE booltest (a INTEGER, b INTEGER);")
dbGetQuery(mydb, "INSERT INTO booltest VALUES (1, 0);")
dbGetQuery(mydb, "SELECT * FROM booltest;")
dbGetQuery(mydb,"SELECT
CASE a WHEN 1 THEN 'true' ELSE 'false' END as boolA,
CASE b WHEN 1 THEN 'true' ELSE 'false' END as boolB
FROM booltest")
dbGetQuery(mydb, "CREATE TABLE left_table (id INTEGER, description TEXT);")
dbGetQuery(mydb, "CREATE TABLE right_table (id INTEGER, description TEXT);")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 1, 'left 01');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 2, 'left 02');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 3, 'left 03');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 4, 'left 04');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 5, 'left 05');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 6, 'left 06');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 7, 'left 07');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 8, 'left 08');")
dbGetQuery(mydb, "INSERT INTO left_table VALUES ( 9, 'left 09');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 6, 'left 06');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 7, 'left 07');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 8, 'left 08');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 9, 'left 09');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 10, 'left 10');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 11, 'left 11');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 12, 'left 12');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 13, 'left 13');")
dbGetQuery(mydb, "INSERT INTO right_table VALUES ( 14, 'left 14');")
dbGetQuery(mydb, "SELECT * FROM left_table;")
dbGetQuery(mydb, "SELECT * FROM right_table;")
dbGetQuery(mydb,"SELECT l.description AS left_table, r.description AS right_table
FROM left_table AS l
JOIN right_table AS r ON l.id = r.id")
dbGetQuery(mydb,"SELECT l.description AS left_table, r.description AS right_table
FROM left_table AS l
RIGHT JOIN right_table AS r ON l.id = r.id")
dbGetQuery(mydb,"SELECT l.description AS left_table, r.description AS right_table
FROM left_table AS l
LEFT JOIN right_table AS r ON l.id = r.id")
dbGetQuery(mydb, "SELECT * FROM left_table
UNION
SELECT * FROM right_table;")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_char TEXT;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD common_char TEXT")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT COUNT(*) FROM Schools;")
dbGetQuery(mydb, "SELECT COUNT(*) FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO Schools (common_char) Values ('school_a') ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_char) Values ('school_b') ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_char) Values ('school_c') ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_char) Values ('school_d') ;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
bGetQuery(mydb, "DROP TABLE IF EXISTS Schools;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS Schools;")
dbGetQuery(mydb,"CREATE TABLE Schools (
Schoolid INTEGER AUTO_INCREMENT PRIMARY KEY,
SchoolName TEXT,
SchoolNationalRanking INTEGER DEFAULT 3,
SchoolStateRanking INTEGER DEFAULT 1
);")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('a');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('b');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('c');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('d');")
#display the table
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools DROp Schoolid;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_char TEXT;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools DROP common_char TEXT;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools DROP COLUMN common_char;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_char TEXT DEFAULT 'school_xx';")
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_char TEXT;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "INSERT INTO Schools (School name, common_char) Values ('e','school_a') ;")
dbGetQuery(mydb, "INSERT INTO Schools (SchoolName, common_char) Values ('e','school_a') ;")
dbGetQuery(mydb, "INSERT INTO Schools (SchoolName, common_char) Values ('f','school_b') ;")
dbGetQuery(mydb, "INSERT INTO Schools (schoolName, common_char) Values ('g','school_c') ;")
dbGetQuery(mydb, "INSERT INTO Schools (schoolName, common_char) Values ('h','school_d') ;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_char) Values ('school_a') WHERE TeacherLastName = 'A';")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_char) Values ('school_a') WHERE TeacherAge  = 25;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_char) Values ('school_a') WHERE TeacherAge < 26;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName, TeacherLastName,Teacher Age, common_char) Values ('Emily','D',55,'school_a');")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName, TeacherLastName,TeacherAge, common_char) Values ('Emily','D',55,'school_a');")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName, TeacherLastName,TeacherAge, common_char) Values ('Emily','D',55,'school_b');")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName, TeacherLastName,TeacherAge, common_char) Values ('Emily','D',55,'school_c');")
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName, TeacherLastName,TeacherAge, common_char) Values ('Emily','D',55,'school_d');")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"SELECT *
FROM Schools AS l
RIGHT JOIN NewTeachers AS r ON l.common_char = r.common_char")
dbGetQuery(mydb, "SELECT * FROM Schools
UNION
SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"SELECT (TeacherFirstName, TeacherLastName, TeacherAge, schoolName,common_char)
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_char = r.common_char")
dbGetQuery(mydb,"SELECT (TeacherFirstName, TeacherLastName, TeacherAge, schoolName)
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_char = r.common_char")
bGetQuery(mydb,"SELECT *
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_char = r.common_char")
dbGetQuery(mydb,"SELECT *
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_char = r.common_char")
dbDisconnect(mydb)
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
mydb <- dbConnect(MySQL(), user = db_user, password = db_password, dbname = db_name, host = db_host, port = db_port)
summary(mydb)
#EXERCISE 7
#Create a new table with four variables and a primary key that is a sequential id value.
#dbListTables(mydb)
dbGetQuery(mydb, "DROP TABLE IF EXISTS Schools;")
dbGetQuery(mydb,"CREATE TABLE Schools (
Schoolid INTEGER AUTO_INCREMENT PRIMARY KEY,
SchoolName TEXT,
SchoolNationalRanking INTEGER DEFAULT 3,
SchoolStateRanking INTEGER DEFAULT 1
);")
#insert some new values
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('a');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('b');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('c');")
dbGetQuery(mydb,"INSERT INTO Schools(SchoolName) VALUES ('d');")
#display the table
dbGetQuery(mydb, "SELECT * FROM Schools;")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#delete the table if it's already existed
#dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#delete the table if it's already existed
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
#add data from the teachers table (ONLY can be run one time, otherwise it'll add up)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
#EXERCISE 1
#Make two toy data sets (two dataframes?so two tables?)
#with at least three variables and at least 30 rows each in them(manually?).
#Have a mix of numeric and character variables.
TeacherFirstName <- c(rep("John",10),rep("Bob",10),rep("Rachel",10))
TeacherLastName <- c(rep("A",10),rep("B",10),rep("C",10))
TeacherAge <-c(rep(25,10),rep(30,10),rep(40,10))
Teacher_DF <-data.frame(TeacherFirstName,TeacherLastName,TeacherAge)
Teacher_DF
#Transfer these dataframes to your SQL database using the DBI commands. Name the tables whatever you like.
dbWriteTable(mydb, "Teachers", Teacher_DF)
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#delete the table if it's already existed
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
#add data from the teachers table (ONLY can be run one time, otherwise it'll add up)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
#CHECK if the data is inserted correctly
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
#insert new rows
#dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('John', 'A',25),('Bob','B',30),('Rachel','C',40);")
#drop the original table (i.e., Teachers) by using DBI
#dbRemoveTable(mydb,"Teachers")
#dbGetQuery(mydb, "DROP TABLE Teachers;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS Teachers;")
#check if the table "teachers" has been successfully dropped
dbListTables(mydb)
dbListTables(mydb)
dbListTables(mydb)
dbGetQuery(mydb, "SELECT * FROM Schools;")
#drop the unique primary key id
dbGetQuery(mydb, "ALTER TABLE Schools DROP Schoolid;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
#insert a new common column
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_char TEXT;")
#dbGetQuery(mydb, "ALTER TABLE Schools DROP COLUMN common_char;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD common_char TEXT")
#check num of rows for prep of inserting new values
dbGetQuery(mydb, "SELECT COUNT(*) FROM Schools;") #4 rows
dbGetQuery(mydb, "SELECT COUNT(*) FROM NewTeachers;") #32 rows
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
#since the original table already has many duplicated rows so I add two new duplicated rows
dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('Emily', 'D',55),('Emily','D',55);")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
#since the original table already has many duplicated rows so I add two new duplicated rows
dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('Emily', 'D',55),('Emily','D',55);")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#delete the table if it's already existed
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
#add data from the teachers table (ONLY can be run one time, otherwise it'll add up)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
#EXERCISE 1
#Make two toy data sets (two dataframes?so two tables?)
#with at least three variables and at least 30 rows each in them(manually?).
#Have a mix of numeric and character variables.
TeacherFirstName <- c(rep("John",10),rep("Bob",10),rep("Rachel",10))
TeacherLastName <- c(rep("A",10),rep("B",10),rep("C",10))
TeacherAge <-c(rep(25,10),rep(30,10),rep(40,10))
Teacher_DF <-data.frame(TeacherFirstName,TeacherLastName,TeacherAge)
Teacher_DF
#Transfer these dataframes to your SQL database using the DBI commands. Name the tables whatever you like.
dbWriteTable(mydb, "Teachers", Teacher_DF)
#EXERCISE 4
#Create a table that is exactly the same as your first toy data table but this time use SQL commands. Display your new table. Then delete the original table.
#delete the table if it's already existed
dbGetQuery(mydb, "DROP TABLE IF EXISTS NewTeachers;")
dbGetQuery(mydb,"CREATE TABLE NewTeachers (
TeacherFirstName TEXT,
TeacherLastName TEXT,
TeacherAge INTEGER
);")
dbListTables(mydb)
#add data from the teachers table (ONLY can be run one time, otherwise it'll add up)
dbGetQuery(mydb, "INSERT INTO NewTeachers (TeacherFirstName,TeacherLastName, TeacherAge) SELECT TeacherFirstName, TeacherLastName, TeacherAge FROM Teachers ;")
#CHECK if the data is inserted correctly
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
#insert new rows
#dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('John', 'A',25),('Bob','B',30),('Rachel','C',40);")
#drop the original table (i.e., Teachers) by using DBI
#dbRemoveTable(mydb,"Teachers")
#dbGetQuery(mydb, "DROP TABLE Teachers;")
dbGetQuery(mydb, "DROP TABLE IF EXISTS Teachers;")
#check if the table "teachers" has been successfully dropped
dbListTables(mydb)
#EXERCISE 6
#Add a column to one of your toy data tables with a default value of 3. Display your new table. Delete this column.
#add new column for number of courses that a teacher teaches in table NewTeachers and set default value 3
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD NumofCourses INTEGER DEFAULT 3;")
#display the new column and delete the column
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"ALTER TABLE NewTeachers DROP COLUMN NumofCourses;")
dbGetQuery(mydb,"SELECT * FROM NewTeachers;")
#EXERCISE 8
#Query one of your original toy data tables, for two different conditions
#dbListTables(mydb)
#dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
#display the information of teachers named as Bob
dbGetQuery(mydb, "SELECT * FROM NewTeachers WHERE TeacherFirstName LIKE '%Bob%';")
#display the teachers names where teachers first names have letter "o" in the second place
dbGetQuery(mydb,"SELECT TeacherFirstName, TeacherLastName FROM NewTeachers WHERE TeacherFirstName LIKE '_o%';")
#EXERCISE 9
#Insert a duplicate row into one of your toy data tables. Then query the table without including duplicates.
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
#since the original table already has many duplicated rows so I add two new duplicated rows
dbGetQuery(mydb, "INSERT INTO NewTeachers VALUES('Emily', 'D',55),('Emily','D',55);")
#if it's set up correctly, there should be 32 rows (no spacd b/t count (*))
dbGetQuery(mydb, "SELECT COUNT(*) FROM NewTeachers;")
#displace unique rows
dbGetQuery(mydb, "SELECT DISTINCT TeacherFirstName, TeacherLastName, TeacherAge FROM NewTeachers;")
#dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbListTables(mydb)
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD common_char TEXT")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "ALTER TABLE Schools DROP COLUMN common_char;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers DROP COLUMN common_char;")
dbGetQuery(mydb, "ALTER TABLE Schools ADD common_ID INTEGER;")
dbGetQuery(mydb, "SELECT COUNT(*) FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "ALTER TABLE NewTeachers ADD common_ID INTEGER;")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (1) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (2) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (3) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (4) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (5) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (6) ;")
dbGetQuery(mydb, "INSERT INTO Schools (common_ID) Values (7) ;")
dbGetQuery(mydb, "SELECT * FROM Schools;")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (1);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (2);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (3);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (4);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (5);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (6);")
dbGetQuery(mydb, "INSERT INTO NewTeachers (common_ID) Values (7);")
dbGetQuery(mydb, "SELECT * FROM NewTeachers;")
dbGetQuery(mydb,"SELECT *
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_char = r.common_char")
dbGetQuery(mydb,"SELECT *
FROM Schools AS l
JOIN NewTeachers AS r ON l.common_ID = r.common_ID")
dbGetQuery(mydb,"SELECT *
FROM Schools AS l
RIGHT JOIN NewTeachers AS r ON l.common_ID = r.common_ID")
dbGetQuery(mydb, "SELECT * FROM Schools
UNION
SELECT * FROM NewTeachers;")
dbDisconnect(mydb)
